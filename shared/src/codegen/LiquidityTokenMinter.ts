/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LiquidityTokenMinterInterface extends utils.Interface {
  contractName: "LiquidityTokenMinter";
  functions: {
    "update_mining_parameters()": FunctionFragment;
    "start_epoch_time_write()": FunctionFragment;
    "future_epoch_time_write()": FunctionFragment;
    "mint(address)": FunctionFragment;
    "mint_many(address[8])": FunctionFragment;
    "mint_for(address,address)": FunctionFragment;
    "toggle_approve_mint(address)": FunctionFragment;
    "recover_balance(address)": FunctionFragment;
    "commit_next_emission(uint256)": FunctionFragment;
    "commit_transfer_emergency_return(address)": FunctionFragment;
    "apply_transfer_emergency_return()": FunctionFragment;
    "commit_transfer_ownership(address)": FunctionFragment;
    "apply_transfer_ownership()": FunctionFragment;
    "mining_epoch()": FunctionFragment;
    "start_epoch_time()": FunctionFragment;
    "rate()": FunctionFragment;
    "committed_rate()": FunctionFragment;
    "is_start()": FunctionFragment;
    "token()": FunctionFragment;
    "controller()": FunctionFragment;
    "minted(address,address)": FunctionFragment;
    "allowed_to_mint_for(address,address)": FunctionFragment;
    "future_emergency_return()": FunctionFragment;
    "emergency_return()": FunctionFragment;
    "admin()": FunctionFragment;
    "future_admin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "update_mining_parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_epoch_time_write",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time_write",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(functionFragment: "mint_many", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "mint_for",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggle_approve_mint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recover_balance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_next_emission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_emergency_return",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_transfer_emergency_return",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mining_epoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "committed_rate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "is_start", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowed_to_mint_for",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "future_emergency_return",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergency_return",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "update_mining_parameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_epoch_time_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint_many", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint_for", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggle_approve_mint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recover_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_next_emission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_transfer_emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mining_epoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "committed_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowed_to_mint_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;

  events: {
    "Minted(address,address,uint256)": EventFragment;
    "UpdateMiningParameters(uint256,uint256)": EventFragment;
    "CommitNextEmission(uint256)": EventFragment;
    "CommitEmergencyReturn(address)": EventFragment;
    "ApplyEmergencyReturn(address)": EventFragment;
    "CommitOwnership(address)": EventFragment;
    "ApplyOwnership(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMiningParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitNextEmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitEmergencyReturn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyEmergencyReturn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyOwnership"): EventFragment;
}

export type MintedEvent = TypedEvent<
  [string, string, BigNumber],
  { recipient: string; gauge: string; minted: BigNumber }
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export type UpdateMiningParametersEvent = TypedEvent<
  [BigNumber, BigNumber],
  { time: BigNumber; rate: BigNumber }
>;

export type UpdateMiningParametersEventFilter =
  TypedEventFilter<UpdateMiningParametersEvent>;

export type CommitNextEmissionEvent = TypedEvent<
  [BigNumber],
  { rate: BigNumber }
>;

export type CommitNextEmissionEventFilter =
  TypedEventFilter<CommitNextEmissionEvent>;

export type CommitEmergencyReturnEvent = TypedEvent<
  [string],
  { admin: string }
>;

export type CommitEmergencyReturnEventFilter =
  TypedEventFilter<CommitEmergencyReturnEvent>;

export type ApplyEmergencyReturnEvent = TypedEvent<[string], { admin: string }>;

export type ApplyEmergencyReturnEventFilter =
  TypedEventFilter<ApplyEmergencyReturnEvent>;

export type CommitOwnershipEvent = TypedEvent<[string], { admin: string }>;

export type CommitOwnershipEventFilter = TypedEventFilter<CommitOwnershipEvent>;

export type ApplyOwnershipEvent = TypedEvent<[string], { admin: string }>;

export type ApplyOwnershipEventFilter = TypedEventFilter<ApplyOwnershipEvent>;

export interface LiquidityTokenMinter extends BaseContract {
  contractName: "LiquidityTokenMinter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityTokenMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    update_mining_parameters(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    future_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      gauge_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint_many(
      gauge_addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recover_balance(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit_next_emission(
      _rate_per_week: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit_transfer_emergency_return(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    apply_transfer_emergency_return(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mining_epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    start_epoch_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    committed_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    is_start(overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    minted(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowed_to_mint_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    future_emergency_return(overrides?: CallOverrides): Promise<[string]>;

    emergency_return(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;
  };

  update_mining_parameters(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start_epoch_time_write(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  future_epoch_time_write(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    gauge_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint_many(
    gauge_addrs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint_for(
    gauge_addr: string,
    _for: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggle_approve_mint(
    minting_user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recover_balance(
    _coin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit_next_emission(
    _rate_per_week: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit_transfer_emergency_return(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  apply_transfer_emergency_return(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  apply_transfer_ownership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

  start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  committed_rate(overrides?: CallOverrides): Promise<BigNumber>;

  is_start(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  minted(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowed_to_mint_for(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  future_emergency_return(overrides?: CallOverrides): Promise<string>;

  emergency_return(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    update_mining_parameters(overrides?: CallOverrides): Promise<void>;

    start_epoch_time_write(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time_write(overrides?: CallOverrides): Promise<BigNumber>;

    mint(gauge_addr: string, overrides?: CallOverrides): Promise<void>;

    mint_many(gauge_addrs: string[], overrides?: CallOverrides): Promise<void>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recover_balance(_coin: string, overrides?: CallOverrides): Promise<boolean>;

    commit_next_emission(
      _rate_per_week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commit_transfer_emergency_return(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_transfer_emergency_return(overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

    start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    committed_rate(overrides?: CallOverrides): Promise<BigNumber>;

    is_start(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    minted(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowed_to_mint_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    future_emergency_return(overrides?: CallOverrides): Promise<string>;

    emergency_return(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Minted(address,address,uint256)"(
      recipient?: string | null,
      gauge?: null,
      minted?: null
    ): MintedEventFilter;
    Minted(
      recipient?: string | null,
      gauge?: null,
      minted?: null
    ): MintedEventFilter;

    "UpdateMiningParameters(uint256,uint256)"(
      time?: null,
      rate?: null
    ): UpdateMiningParametersEventFilter;
    UpdateMiningParameters(
      time?: null,
      rate?: null
    ): UpdateMiningParametersEventFilter;

    "CommitNextEmission(uint256)"(rate?: null): CommitNextEmissionEventFilter;
    CommitNextEmission(rate?: null): CommitNextEmissionEventFilter;

    "CommitEmergencyReturn(address)"(
      admin?: null
    ): CommitEmergencyReturnEventFilter;
    CommitEmergencyReturn(admin?: null): CommitEmergencyReturnEventFilter;

    "ApplyEmergencyReturn(address)"(
      admin?: null
    ): ApplyEmergencyReturnEventFilter;
    ApplyEmergencyReturn(admin?: null): ApplyEmergencyReturnEventFilter;

    "CommitOwnership(address)"(admin?: null): CommitOwnershipEventFilter;
    CommitOwnership(admin?: null): CommitOwnershipEventFilter;

    "ApplyOwnership(address)"(admin?: null): ApplyOwnershipEventFilter;
    ApplyOwnership(admin?: null): ApplyOwnershipEventFilter;
  };

  estimateGas: {
    update_mining_parameters(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    future_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      gauge_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint_many(
      gauge_addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recover_balance(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit_next_emission(
      _rate_per_week: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit_transfer_emergency_return(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    apply_transfer_emergency_return(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

    start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    committed_rate(overrides?: CallOverrides): Promise<BigNumber>;

    is_start(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    minted(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowed_to_mint_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    future_emergency_return(overrides?: CallOverrides): Promise<BigNumber>;

    emergency_return(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    update_mining_parameters(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    future_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      gauge_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint_many(
      gauge_addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recover_balance(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit_next_emission(
      _rate_per_week: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit_transfer_emergency_return(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    apply_transfer_emergency_return(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mining_epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    committed_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    is_start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minted(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowed_to_mint_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_emergency_return(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergency_return(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
