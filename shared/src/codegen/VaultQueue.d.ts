/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VaultQueueInterface extends ethers.utils.Interface {
  functions: {
    "STETH_VAULT()": FunctionFragment;
    "WETH_VAULT()": FunctionFragment;
    "hasWithdrawal(address,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "qTransfer(address,uint256)": FunctionFragment;
    "queueSize()": FunctionFragment;
    "queueTransfer(address,address,address,uint8,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setQueueSize(uint256)": FunctionFragment;
    "totalAmount(address)": FunctionFragment;
    "transfer(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "STETH_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasWithdrawal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "qTransfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "queueSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueTransfer",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setQueueSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalAmount", values: [string]): string;
  encodeFunctionData(functionFragment: "transfer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "STETH_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH_VAULT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queueSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Disburse(address,tuple,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Disburse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class VaultQueue extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VaultQueueInterface;

  functions: {
    STETH_VAULT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "STETH_VAULT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH_VAULT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH_VAULT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    hasWithdrawal(
      vault: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasWithdrawal(address,address)"(
      vault: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    qTransfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creditor: string;
      dstVault: string;
      depositContract: string;
      timestamp: number;
      amount: BigNumber;
      action: number;
      0: string;
      1: string;
      2: string;
      3: number;
      4: BigNumber;
      5: number;
    }>;

    "qTransfer(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creditor: string;
      dstVault: string;
      depositContract: string;
      timestamp: number;
      amount: BigNumber;
      action: number;
      0: string;
      1: string;
      2: string;
      3: number;
      4: BigNumber;
      5: number;
    }>;

    queueSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "queueSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    queueTransfer(
      srcVault: string,
      dstVault: string,
      depositContract: string,
      transferAction: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queueTransfer(address,address,address,uint8,uint256)"(
      srcVault: string,
      dstVault: string,
      depositContract: string,
      transferAction: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setQueueSize(
      _queueSize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setQueueSize(uint256)"(
      _queueSize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalAmount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address)"(
      vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  STETH_VAULT(overrides?: CallOverrides): Promise<string>;

  "STETH_VAULT()"(overrides?: CallOverrides): Promise<string>;

  WETH_VAULT(overrides?: CallOverrides): Promise<string>;

  "WETH_VAULT()"(overrides?: CallOverrides): Promise<string>;

  hasWithdrawal(
    vault: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasWithdrawal(address,address)"(
    vault: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  qTransfer(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    creditor: string;
    dstVault: string;
    depositContract: string;
    timestamp: number;
    amount: BigNumber;
    action: number;
    0: string;
    1: string;
    2: string;
    3: number;
    4: BigNumber;
    5: number;
  }>;

  "qTransfer(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    creditor: string;
    dstVault: string;
    depositContract: string;
    timestamp: number;
    amount: BigNumber;
    action: number;
    0: string;
    1: string;
    2: string;
    3: number;
    4: BigNumber;
    5: number;
  }>;

  queueSize(overrides?: CallOverrides): Promise<BigNumber>;

  "queueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  queueTransfer(
    srcVault: string,
    dstVault: string,
    depositContract: string,
    transferAction: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queueTransfer(address,address,address,uint8,uint256)"(
    srcVault: string,
    dstVault: string,
    depositContract: string,
    transferAction: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setQueueSize(
    _queueSize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setQueueSize(uint256)"(
    _queueSize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalAmount(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(vault: string, overrides?: Overrides): Promise<ContractTransaction>;

  "transfer(address)"(
    vault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    STETH_VAULT(overrides?: CallOverrides): Promise<string>;

    "STETH_VAULT()"(overrides?: CallOverrides): Promise<string>;

    WETH_VAULT(overrides?: CallOverrides): Promise<string>;

    "WETH_VAULT()"(overrides?: CallOverrides): Promise<string>;

    hasWithdrawal(
      vault: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasWithdrawal(address,address)"(
      vault: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    qTransfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creditor: string;
      dstVault: string;
      depositContract: string;
      timestamp: number;
      amount: BigNumber;
      action: number;
      0: string;
      1: string;
      2: string;
      3: number;
      4: BigNumber;
      5: number;
    }>;

    "qTransfer(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creditor: string;
      dstVault: string;
      depositContract: string;
      timestamp: number;
      amount: BigNumber;
      action: number;
      0: string;
      1: string;
      2: string;
      3: number;
      4: BigNumber;
      5: number;
    }>;

    queueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "queueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    queueTransfer(
      srcVault: string,
      dstVault: string,
      depositContract: string,
      transferAction: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "queueTransfer(address,address,address,uint8,uint256)"(
      srcVault: string,
      dstVault: string,
      depositContract: string,
      transferAction: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setQueueSize(
      _queueSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setQueueSize(uint256)"(
      _queueSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(vault: string, overrides?: CallOverrides): Promise<void>;

    "transfer(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Disburse(vault: null, txn: null, portion: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    STETH_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    "STETH_VAULT()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH_VAULT()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasWithdrawal(
      vault: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasWithdrawal(address,address)"(
      vault: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    qTransfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "qTransfer(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "queueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    queueTransfer(
      srcVault: string,
      dstVault: string,
      depositContract: string,
      transferAction: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queueTransfer(address,address,address,uint8,uint256)"(
      srcVault: string,
      dstVault: string,
      depositContract: string,
      transferAction: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setQueueSize(
      _queueSize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setQueueSize(uint256)"(
      _queueSize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(vault: string, overrides?: Overrides): Promise<BigNumber>;

    "transfer(address)"(
      vault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    STETH_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "STETH_VAULT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH_VAULT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasWithdrawal(
      vault: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasWithdrawal(address,address)"(
      vault: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qTransfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "qTransfer(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "queueSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueTransfer(
      srcVault: string,
      dstVault: string,
      depositContract: string,
      transferAction: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queueTransfer(address,address,address,uint8,uint256)"(
      srcVault: string,
      dstVault: string,
      depositContract: string,
      transferAction: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setQueueSize(
      _queueSize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setQueueSize(uint256)"(
      _queueSize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalAmount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address)"(
      vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
