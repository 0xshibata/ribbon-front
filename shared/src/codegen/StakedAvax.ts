/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace StakedAvaxStorage {
  export type UnlockRequestStruct = {
    startedAt: BigNumberish;
    shareAmount: BigNumberish;
  };

  export type UnlockRequestStructOutput = [BigNumber, BigNumber] & {
    startedAt: BigNumber;
    shareAmount: BigNumber;
  };
}

export interface StakedAvaxInterface extends utils.Interface {
  contractName: "StakedAvax";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ROLE_ACCRUE_REWARDS()": FunctionFragment;
    "ROLE_DEPOSIT()": FunctionFragment;
    "ROLE_PAUSE()": FunctionFragment;
    "ROLE_PAUSE_MINTING()": FunctionFragment;
    "ROLE_RESUME()": FunctionFragment;
    "ROLE_RESUME_MINTING()": FunctionFragment;
    "ROLE_SET_TOTAL_POOLED_AVAX_CAP()": FunctionFragment;
    "ROLE_WITHDRAW()": FunctionFragment;
    "accrueRewards(uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancelPendingUnlockRequests()": FunctionFragment;
    "cancelRedeemableUnlockRequests()": FunctionFragment;
    "cancelUnlockRequest(uint256)": FunctionFragment;
    "cooldownPeriod()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit()": FunctionFragment;
    "getPaginatedUnlockRequests(address,uint256,uint256)": FunctionFragment;
    "getPooledAvaxByShares(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getSharesByPooledAvax(uint256)": FunctionFragment;
    "getUnlockRequestCount(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "historicalExchangeRateTimestamps(uint256)": FunctionFragment;
    "historicalExchangeRatesByTimestamp(uint256)": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "mintingPaused()": FunctionFragment;
    "name()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseMinting()": FunctionFragment;
    "paused()": FunctionFragment;
    "redeem()": FunctionFragment;
    "redeemOverdueShares()": FunctionFragment;
    "redeemPeriod()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestUnlock(uint256)": FunctionFragment;
    "resume()": FunctionFragment;
    "resumeMinting()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setCooldownPeriod(uint256)": FunctionFragment;
    "setRedeemPeriod(uint256)": FunctionFragment;
    "setTotalPooledAvaxCap(uint256)": FunctionFragment;
    "stakerCount()": FunctionFragment;
    "submit()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalPooledAvax()": FunctionFragment;
    "totalPooledAvaxCap()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "userSharesInCustody(address)": FunctionFragment;
    "userUnlockRequests(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ACCRUE_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_PAUSE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_PAUSE_MINTING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_RESUME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_RESUME_MINTING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_SET_TOTAL_POOLED_AVAX_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_WITHDRAW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelPendingUnlockRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRedeemableUnlockRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUnlockRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPaginatedUnlockRequests",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPooledAvaxByShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesByPooledAvax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockRequestCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "historicalExchangeRateTimestamps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "historicalExchangeRatesByTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseMinting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemOverdueShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUnlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resumeMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalPooledAvaxCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "submit", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPooledAvax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPooledAvaxCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSharesInCustody",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userUnlockRequests",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ACCRUE_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_PAUSE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_PAUSE_MINTING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_RESUME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_RESUME_MINTING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_SET_TOTAL_POOLED_AVAX_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_WITHDRAW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelPendingUnlockRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRedeemableUnlockRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUnlockRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedUnlockRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPooledAvaxByShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesByPooledAvax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "historicalExchangeRateTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historicalExchangeRatesByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemOverdueShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resumeMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalPooledAvaxCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPooledAvax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPooledAvaxCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSharesInCustody",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUnlockRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AccrueRewards(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "CooldownPeriodUpdated(uint256,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "MintingPaused(address)": EventFragment;
    "MintingResumed(address)": EventFragment;
    "Paused(address)": EventFragment;
    "Redeem(address,uint256,uint256,uint256)": EventFragment;
    "RedeemOverdueShares(address,uint256)": EventFragment;
    "RedeemPeriodUpdated(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Submitted(address,uint256,uint256)": EventFragment;
    "TotalPooledAvaxCapUpdated(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnlockCancelled(address,uint256,uint256)": EventFragment;
    "UnlockRequested(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CooldownPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemOverdueShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalPooledAvaxCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AccrueRewardsEvent = TypedEvent<[BigNumber], { value: BigNumber }>;

export type AccrueRewardsEventFilter = TypedEventFilter<AccrueRewardsEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type CooldownPeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldCooldownPeriod: BigNumber; newCooldownPeriod: BigNumber }
>;

export type CooldownPeriodUpdatedEventFilter =
  TypedEventFilter<CooldownPeriodUpdatedEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type MintingPausedEvent = TypedEvent<[string], { user: string }>;

export type MintingPausedEventFilter = TypedEventFilter<MintingPausedEvent>;

export type MintingResumedEvent = TypedEvent<[string], { user: string }>;

export type MintingResumedEventFilter = TypedEventFilter<MintingResumedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    user: string;
    unlockRequestedAt: BigNumber;
    shareAmount: BigNumber;
    avaxAmount: BigNumber;
  }
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export type RedeemOverdueSharesEvent = TypedEvent<
  [string, BigNumber],
  { user: string; shareAmount: BigNumber }
>;

export type RedeemOverdueSharesEventFilter =
  TypedEventFilter<RedeemOverdueSharesEvent>;

export type RedeemPeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldRedeemPeriod: BigNumber; newRedeemPeriod: BigNumber }
>;

export type RedeemPeriodUpdatedEventFilter =
  TypedEventFilter<RedeemPeriodUpdatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SubmittedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; avaxAmount: BigNumber; shareAmount: BigNumber }
>;

export type SubmittedEventFilter = TypedEventFilter<SubmittedEvent>;

export type TotalPooledAvaxCapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldTotalPooldAvaxCap: BigNumber; newTotalPooledAvaxCap: BigNumber }
>;

export type TotalPooledAvaxCapUpdatedEventFilter =
  TypedEventFilter<TotalPooledAvaxCapUpdatedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnlockCancelledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; unlockRequestedAt: BigNumber; shareAmount: BigNumber }
>;

export type UnlockCancelledEventFilter = TypedEventFilter<UnlockCancelledEvent>;

export type UnlockRequestedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; shareAmount: BigNumber }
>;

export type UnlockRequestedEventFilter = TypedEventFilter<UnlockRequestedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface StakedAvax extends BaseContract {
  contractName: "StakedAvax";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakedAvaxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROLE_ACCRUE_REWARDS(overrides?: CallOverrides): Promise<[string]>;

    ROLE_DEPOSIT(overrides?: CallOverrides): Promise<[string]>;

    ROLE_PAUSE(overrides?: CallOverrides): Promise<[string]>;

    ROLE_PAUSE_MINTING(overrides?: CallOverrides): Promise<[string]>;

    ROLE_RESUME(overrides?: CallOverrides): Promise<[string]>;

    ROLE_RESUME_MINTING(overrides?: CallOverrides): Promise<[string]>;

    ROLE_SET_TOTAL_POOLED_AVAX_CAP(
      overrides?: CallOverrides
    ): Promise<[string]>;

    ROLE_WITHDRAW(overrides?: CallOverrides): Promise<[string]>;

    accrueRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelPendingUnlockRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRedeemableUnlockRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelUnlockRequest(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPaginatedUnlockRequests(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StakedAvaxStorage.UnlockRequestStructOutput[], BigNumber[]]>;

    getPooledAvaxByShares(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSharesByPooledAvax(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnlockRequestCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    historicalExchangeRateTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    historicalExchangeRatesByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "redeem()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemOverdueShares()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemOverdueShares(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestUnlock(
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resumeMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCooldownPeriod(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedeemPeriod(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalPooledAvaxCap(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    submit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalPooledAvax(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPooledAvaxCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userSharesInCustody(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userUnlockRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startedAt: BigNumber; shareAmount: BigNumber }
    >;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ROLE_ACCRUE_REWARDS(overrides?: CallOverrides): Promise<string>;

  ROLE_DEPOSIT(overrides?: CallOverrides): Promise<string>;

  ROLE_PAUSE(overrides?: CallOverrides): Promise<string>;

  ROLE_PAUSE_MINTING(overrides?: CallOverrides): Promise<string>;

  ROLE_RESUME(overrides?: CallOverrides): Promise<string>;

  ROLE_RESUME_MINTING(overrides?: CallOverrides): Promise<string>;

  ROLE_SET_TOTAL_POOLED_AVAX_CAP(overrides?: CallOverrides): Promise<string>;

  ROLE_WITHDRAW(overrides?: CallOverrides): Promise<string>;

  accrueRewards(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelPendingUnlockRequests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRedeemableUnlockRequests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelUnlockRequest(
    unlockIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPaginatedUnlockRequests(
    user: string,
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[StakedAvaxStorage.UnlockRequestStructOutput[], BigNumber[]]>;

  getPooledAvaxByShares(
    shareAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSharesByPooledAvax(
    avaxAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnlockRequestCount(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  historicalExchangeRateTimestamps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  historicalExchangeRatesByTimestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _cooldownPeriod: BigNumberish,
    _redeemPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintingPaused(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseMinting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "redeem()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    unlockIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemOverdueShares()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemOverdueShares(uint256)"(
    unlockIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestUnlock(
    shareAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resumeMinting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCooldownPeriod(
    newCooldownPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedeemPeriod(
    newRedeemPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalPooledAvaxCap(
    newTotalPooledAvaxCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerCount(overrides?: CallOverrides): Promise<BigNumber>;

  submit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalPooledAvax(overrides?: CallOverrides): Promise<BigNumber>;

  totalPooledAvaxCap(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userSharesInCustody(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userUnlockRequests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startedAt: BigNumber; shareAmount: BigNumber }
  >;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ROLE_ACCRUE_REWARDS(overrides?: CallOverrides): Promise<string>;

    ROLE_DEPOSIT(overrides?: CallOverrides): Promise<string>;

    ROLE_PAUSE(overrides?: CallOverrides): Promise<string>;

    ROLE_PAUSE_MINTING(overrides?: CallOverrides): Promise<string>;

    ROLE_RESUME(overrides?: CallOverrides): Promise<string>;

    ROLE_RESUME_MINTING(overrides?: CallOverrides): Promise<string>;

    ROLE_SET_TOTAL_POOLED_AVAX_CAP(overrides?: CallOverrides): Promise<string>;

    ROLE_WITHDRAW(overrides?: CallOverrides): Promise<string>;

    accrueRewards(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelPendingUnlockRequests(overrides?: CallOverrides): Promise<void>;

    cancelRedeemableUnlockRequests(overrides?: CallOverrides): Promise<void>;

    cancelUnlockRequest(
      unlockIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getPaginatedUnlockRequests(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StakedAvaxStorage.UnlockRequestStructOutput[], BigNumber[]]>;

    getPooledAvaxByShares(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesByPooledAvax(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlockRequestCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    historicalExchangeRateTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historicalExchangeRatesByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintingPaused(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseMinting(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "redeem()"(overrides?: CallOverrides): Promise<void>;

    "redeem(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemOverdueShares()"(overrides?: CallOverrides): Promise<void>;

    "redeemOverdueShares(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestUnlock(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    resumeMinting(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCooldownPeriod(
      newCooldownPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedeemPeriod(
      newRedeemPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalPooledAvaxCap(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>;

    submit(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalPooledAvax(overrides?: CallOverrides): Promise<BigNumber>;

    totalPooledAvaxCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userSharesInCustody(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUnlockRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startedAt: BigNumber; shareAmount: BigNumber }
    >;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AccrueRewards(uint256)"(value?: null): AccrueRewardsEventFilter;
    AccrueRewards(value?: null): AccrueRewardsEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "CooldownPeriodUpdated(uint256,uint256)"(
      oldCooldownPeriod?: null,
      newCooldownPeriod?: null
    ): CooldownPeriodUpdatedEventFilter;
    CooldownPeriodUpdated(
      oldCooldownPeriod?: null,
      newCooldownPeriod?: null
    ): CooldownPeriodUpdatedEventFilter;

    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "MintingPaused(address)"(user?: null): MintingPausedEventFilter;
    MintingPaused(user?: null): MintingPausedEventFilter;

    "MintingResumed(address)"(user?: null): MintingResumedEventFilter;
    MintingResumed(user?: null): MintingResumedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Redeem(address,uint256,uint256,uint256)"(
      user?: string | null,
      unlockRequestedAt?: null,
      shareAmount?: null,
      avaxAmount?: null
    ): RedeemEventFilter;
    Redeem(
      user?: string | null,
      unlockRequestedAt?: null,
      shareAmount?: null,
      avaxAmount?: null
    ): RedeemEventFilter;

    "RedeemOverdueShares(address,uint256)"(
      user?: string | null,
      shareAmount?: null
    ): RedeemOverdueSharesEventFilter;
    RedeemOverdueShares(
      user?: string | null,
      shareAmount?: null
    ): RedeemOverdueSharesEventFilter;

    "RedeemPeriodUpdated(uint256,uint256)"(
      oldRedeemPeriod?: null,
      newRedeemPeriod?: null
    ): RedeemPeriodUpdatedEventFilter;
    RedeemPeriodUpdated(
      oldRedeemPeriod?: null,
      newRedeemPeriod?: null
    ): RedeemPeriodUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Submitted(address,uint256,uint256)"(
      user?: string | null,
      avaxAmount?: null,
      shareAmount?: null
    ): SubmittedEventFilter;
    Submitted(
      user?: string | null,
      avaxAmount?: null,
      shareAmount?: null
    ): SubmittedEventFilter;

    "TotalPooledAvaxCapUpdated(uint256,uint256)"(
      oldTotalPooldAvaxCap?: null,
      newTotalPooledAvaxCap?: null
    ): TotalPooledAvaxCapUpdatedEventFilter;
    TotalPooledAvaxCapUpdated(
      oldTotalPooldAvaxCap?: null,
      newTotalPooledAvaxCap?: null
    ): TotalPooledAvaxCapUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UnlockCancelled(address,uint256,uint256)"(
      user?: string | null,
      unlockRequestedAt?: null,
      shareAmount?: null
    ): UnlockCancelledEventFilter;
    UnlockCancelled(
      user?: string | null,
      unlockRequestedAt?: null,
      shareAmount?: null
    ): UnlockCancelledEventFilter;

    "UnlockRequested(address,uint256)"(
      user?: string | null,
      shareAmount?: null
    ): UnlockRequestedEventFilter;
    UnlockRequested(
      user?: string | null,
      shareAmount?: null
    ): UnlockRequestedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ACCRUE_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_PAUSE(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_PAUSE_MINTING(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_RESUME(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_RESUME_MINTING(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_SET_TOTAL_POOLED_AVAX_CAP(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ROLE_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

    accrueRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelPendingUnlockRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRedeemableUnlockRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelUnlockRequest(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPaginatedUnlockRequests(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPooledAvaxByShares(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesByPooledAvax(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlockRequestCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historicalExchangeRateTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historicalExchangeRatesByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "redeem()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemOverdueShares()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemOverdueShares(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestUnlock(
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resumeMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCooldownPeriod(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedeemPeriod(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalPooledAvaxCap(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerCount(overrides?: CallOverrides): Promise<BigNumber>;

    submit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalPooledAvax(overrides?: CallOverrides): Promise<BigNumber>;

    totalPooledAvaxCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userSharesInCustody(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUnlockRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_ACCRUE_REWARDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_DEPOSIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_PAUSE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_PAUSE_MINTING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_RESUME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_RESUME_MINTING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_SET_TOTAL_POOLED_AVAX_CAP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_WITHDRAW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelPendingUnlockRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRedeemableUnlockRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelUnlockRequest(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPaginatedUnlockRequests(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPooledAvaxByShares(
      shareAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSharesByPooledAvax(
      avaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockRequestCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historicalExchangeRateTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historicalExchangeRatesByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _cooldownPeriod: BigNumberish,
      _redeemPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeem()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemOverdueShares()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemOverdueShares(uint256)"(
      unlockIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestUnlock(
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resumeMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCooldownPeriod(
      newCooldownPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedeemPeriod(
      newRedeemPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalPooledAvaxCap(
      newTotalPooledAvaxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPooledAvax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPooledAvaxCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userSharesInCustody(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userUnlockRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
