/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ProtocolAdapterTypes {
  export type OptionTermsStruct = {
    underlying: string;
    strikeAsset: string;
    collateralAsset: string;
    expiry: BigNumberish;
    strikePrice: BigNumberish;
    optionType: BigNumberish;
    paymentToken: string;
  };

  export type OptionTermsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    underlying: string;
    strikeAsset: string;
    collateralAsset: string;
    expiry: BigNumber;
    strikePrice: BigNumber;
    optionType: number;
    paymentToken: string;
  };
}

export declare namespace Types {
  export type PartyStruct = {
    kind: BytesLike;
    wallet: string;
    token: string;
    amount: BigNumberish;
    id: BigNumberish;
  };

  export type PartyStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    kind: string;
    wallet: string;
    token: string;
    amount: BigNumber;
    id: BigNumber;
  };

  export type SignatureStruct = {
    signatory: string;
    validator: string;
    version: BytesLike;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [
    string,
    string,
    string,
    number,
    string,
    string
  ] & {
    signatory: string;
    validator: string;
    version: string;
    v: number;
    r: string;
    s: string;
  };

  export type OrderStruct = {
    nonce: BigNumberish;
    expiry: BigNumberish;
    signer: Types.PartyStruct;
    sender: Types.PartyStruct;
    affiliate: Types.PartyStruct;
    signature: Types.SignatureStruct;
  };

  export type OrderStructOutput = [
    BigNumber,
    BigNumber,
    Types.PartyStructOutput,
    Types.PartyStructOutput,
    Types.PartyStructOutput,
    Types.SignatureStructOutput
  ] & {
    nonce: BigNumber;
    expiry: BigNumber;
    signer: Types.PartyStructOutput;
    sender: Types.PartyStructOutput;
    affiliate: Types.PartyStructOutput;
    signature: Types.SignatureStructOutput;
  };
}

export interface RibbonCoveredCallInterface extends utils.Interface {
  contractName: "RibbonCoveredCall";
  functions: {
    "MINIMUM_SUPPLY()": FunctionFragment;
    "SWAP_CONTRACT()": FunctionFragment;
    "USDC()": FunctionFragment;
    "WETH()": FunctionFragment;
    "accountVaultBalance(address)": FunctionFragment;
    "adapter()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "assetAmountToShares(uint256)": FunctionFragment;
    "assetBalance()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cap()": FunctionFragment;
    "closeShort()": FunctionFragment;
    "commitAndClose((address,address,address,uint256,uint256,uint8,address))": FunctionFragment;
    "currentOption()": FunctionFragment;
    "currentOptionExpiry()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delay()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositETH()": FunctionFragment;
    "emergencyWithdrawFromShort()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,uint256,string,string)": FunctionFragment;
    "instantWithdrawalFee()": FunctionFragment;
    "isPut()": FunctionFragment;
    "lockedAmount()": FunctionFragment;
    "lockedRatio()": FunctionFragment;
    "manager()": FunctionFragment;
    "maxWithdrawAmount(address)": FunctionFragment;
    "maxWithdrawableShares()": FunctionFragment;
    "migrate()": FunctionFragment;
    "name()": FunctionFragment;
    "nextOption()": FunctionFragment;
    "nextOptionReadyAt()": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replacementVault()": FunctionFragment;
    "rollToNextOption()": FunctionFragment;
    "sellOptions((uint256,uint256,(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(address,address,bytes1,uint8,bytes32,bytes32)))": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setWithdrawalFee(uint256)": FunctionFragment;
    "sunset(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlying()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAmountWithShares(uint256)": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
    "withdrawToV1Vault(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MINIMUM_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountVaultBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "adapter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetAmountToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeShort",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitAndClose",
    values: [ProtocolAdapterTypes.OptionTermsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "currentOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOptionExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawFromShort",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instantWithdrawalFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawableShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOptionReadyAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replacementVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollToNextOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellOptions",
    values: [Types.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sunset", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAmountWithShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToV1Vault",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetAmountToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeShort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitAndClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOptionExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawFromShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instantWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawableShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOptionReadyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replacementVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollToNextOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sunset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAmountWithShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToV1Vault",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CapSet(uint256,uint256,address)": EventFragment;
    "CloseShort(address,uint256,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "ManagerChanged(address,address)": EventFragment;
    "Migrate(address,address,uint256,uint256)": EventFragment;
    "OpenShort(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VaultSunset(address)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawToV1Vault(address,uint256,address,uint256)": EventFragment;
    "WithdrawalFeeSet(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultSunset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawToV1Vault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFeeSet"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type CapSetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { oldCap: BigNumber; newCap: BigNumber; manager: string }
>;

export type CapSetEventFilter = TypedEventFilter<CapSetEvent>;

export type CloseShortEvent = TypedEvent<
  [string, BigNumber, string],
  { options: string; withdrawAmount: BigNumber; manager: string }
>;

export type CloseShortEventFilter = TypedEventFilter<CloseShortEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; amount: BigNumber; share: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ManagerChangedEvent = TypedEvent<
  [string, string],
  { oldManager: string; newManager: string }
>;

export type ManagerChangedEventFilter = TypedEventFilter<ManagerChangedEvent>;

export type MigrateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { account: string; replacement: string; shares: BigNumber; amount: BigNumber }
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export type OpenShortEvent = TypedEvent<
  [string, BigNumber, string],
  { options: string; depositAmount: BigNumber; manager: string }
>;

export type OpenShortEventFilter = TypedEventFilter<OpenShortEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type VaultSunsetEvent = TypedEvent<[string], { replacement: string }>;

export type VaultSunsetEventFilter = TypedEventFilter<VaultSunsetEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { account: string; amount: BigNumber; share: BigNumber; fee: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawToV1VaultEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  { account: string; oldShares: BigNumber; to: string; newShares: BigNumber }
>;

export type WithdrawToV1VaultEventFilter =
  TypedEventFilter<WithdrawToV1VaultEvent>;

export type WithdrawalFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldFee: BigNumber; newFee: BigNumber }
>;

export type WithdrawalFeeSetEventFilter =
  TypedEventFilter<WithdrawalFeeSetEvent>;

export interface RibbonCoveredCall extends BaseContract {
  contractName: "RibbonCoveredCall";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RibbonCoveredCallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    SWAP_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    adapter(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    assetAmountToShares(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    closeShort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitAndClose(
      optionTerms: ProtocolAdapterTypes.OptionTermsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentOption(overrides?: CallOverrides): Promise<[string]>;

    currentOptionExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawFromShort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instantWithdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPut(overrides?: CallOverrides): Promise<[boolean]>;

    lockedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    maxWithdrawAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxWithdrawableShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextOption(overrides?: CallOverrides): Promise<[string]>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replacementVault(overrides?: CallOverrides): Promise<[string]>;

    rollToNextOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellOptions(
      order: Types.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sunset(
      upgradeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAmountWithShares(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountAfterFee: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    withdrawETH(
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToV1Vault(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  SWAP_CONTRACT(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  accountVaultBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  adapter(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  assetAmountToShares(
    assetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  closeShort(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitAndClose(
    optionTerms: ProtocolAdapterTypes.OptionTermsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentOption(overrides?: CallOverrides): Promise<string>;

  currentOptionExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawFromShort(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _feeRecipient: string,
    _initCap: BigNumberish,
    _tokenName: string,
    _tokenSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instantWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  isPut(overrides?: CallOverrides): Promise<boolean>;

  lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lockedRatio(overrides?: CallOverrides): Promise<BigNumber>;

  manager(overrides?: CallOverrides): Promise<string>;

  maxWithdrawAmount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxWithdrawableShares(overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextOption(overrides?: CallOverrides): Promise<string>;

  nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replacementVault(overrides?: CallOverrides): Promise<string>;

  rollToNextOption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellOptions(
    order: Types.OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCap(
    newCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    newWithdrawalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sunset(
    upgradeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  withdraw(
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAmountWithShares(
    share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountAfterFee: BigNumber; feeAmount: BigNumber }
  >;

  withdrawETH(
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToV1Vault(
    share: BigNumberish,
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    SWAP_CONTRACT(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adapter(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    assetAmountToShares(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    closeShort(overrides?: CallOverrides): Promise<void>;

    commitAndClose(
      optionTerms: ProtocolAdapterTypes.OptionTermsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    currentOption(overrides?: CallOverrides): Promise<string>;

    currentOptionExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    emergencyWithdrawFromShort(overrides?: CallOverrides): Promise<void>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    instantWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    isPut(overrides?: CallOverrides): Promise<boolean>;

    lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lockedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    maxWithdrawAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdrawableShares(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nextOption(overrides?: CallOverrides): Promise<string>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replacementVault(overrides?: CallOverrides): Promise<string>;

    rollToNextOption(overrides?: CallOverrides): Promise<void>;

    sellOptions(
      order: Types.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(newCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(newManager: string, overrides?: CallOverrides): Promise<void>;

    setWithdrawalFee(
      newWithdrawalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sunset(upgradeTo: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    withdraw(share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAmountWithShares(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountAfterFee: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    withdrawETH(share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawToV1Vault(
      share: BigNumberish,
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "CapSet(uint256,uint256,address)"(
      oldCap?: null,
      newCap?: null,
      manager?: null
    ): CapSetEventFilter;
    CapSet(oldCap?: null, newCap?: null, manager?: null): CapSetEventFilter;

    "CloseShort(address,uint256,address)"(
      options?: string | null,
      withdrawAmount?: null,
      manager?: null
    ): CloseShortEventFilter;
    CloseShort(
      options?: string | null,
      withdrawAmount?: null,
      manager?: null
    ): CloseShortEventFilter;

    "Deposit(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      share?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      amount?: null,
      share?: null
    ): DepositEventFilter;

    "ManagerChanged(address,address)"(
      oldManager?: null,
      newManager?: null
    ): ManagerChangedEventFilter;
    ManagerChanged(
      oldManager?: null,
      newManager?: null
    ): ManagerChangedEventFilter;

    "Migrate(address,address,uint256,uint256)"(
      account?: null,
      replacement?: null,
      shares?: null,
      amount?: null
    ): MigrateEventFilter;
    Migrate(
      account?: null,
      replacement?: null,
      shares?: null,
      amount?: null
    ): MigrateEventFilter;

    "OpenShort(address,uint256,address)"(
      options?: string | null,
      depositAmount?: null,
      manager?: null
    ): OpenShortEventFilter;
    OpenShort(
      options?: string | null,
      depositAmount?: null,
      manager?: null
    ): OpenShortEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "VaultSunset(address)"(replacement?: null): VaultSunsetEventFilter;
    VaultSunset(replacement?: null): VaultSunsetEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      share?: null,
      fee?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      amount?: null,
      share?: null,
      fee?: null
    ): WithdrawEventFilter;

    "WithdrawToV1Vault(address,uint256,address,uint256)"(
      account?: null,
      oldShares?: null,
      to?: null,
      newShares?: null
    ): WithdrawToV1VaultEventFilter;
    WithdrawToV1Vault(
      account?: null,
      oldShares?: null,
      to?: null,
      newShares?: null
    ): WithdrawToV1VaultEventFilter;

    "WithdrawalFeeSet(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): WithdrawalFeeSetEventFilter;
    WithdrawalFeeSet(oldFee?: null, newFee?: null): WithdrawalFeeSetEventFilter;
  };

  estimateGas: {
    MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    SWAP_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adapter(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    assetAmountToShares(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    closeShort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitAndClose(
      optionTerms: ProtocolAdapterTypes.OptionTermsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentOption(overrides?: CallOverrides): Promise<BigNumber>;

    currentOptionExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawFromShort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instantWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    isPut(overrides?: CallOverrides): Promise<BigNumber>;

    lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lockedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdrawAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdrawableShares(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextOption(overrides?: CallOverrides): Promise<BigNumber>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replacementVault(overrides?: CallOverrides): Promise<BigNumber>;

    rollToNextOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellOptions(
      order: Types.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalFee(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sunset(
      upgradeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAmountWithShares(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawETH(
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToV1Vault(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SWAP_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetAmountToShares(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeShort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitAndClose(
      optionTerms: ProtocolAdapterTypes.OptionTermsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentOptionExpiry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawFromShort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instantWithdrawalFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWithdrawAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdrawableShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replacementVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollToNextOption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellOptions(
      order: Types.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sunset(
      upgradeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAmountWithShares(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToV1Vault(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
