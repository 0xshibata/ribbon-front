/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace RibbonLendDepositHelper {
  export type SwapDataStruct = {
    exchange: string;
    i: BigNumberish;
    j: BigNumberish;
    underlying: boolean;
  };

  export type SwapDataStructOutput = [string, BigNumber, BigNumber, boolean] & {
    exchange: string;
    i: BigNumber;
    j: BigNumber;
    underlying: boolean;
  };
}

export interface LendPoolHelperInterface extends utils.Interface {
  contractName: "LendPoolHelper";
  functions: {
    "ALUSD()": FunctionFragment;
    "BUSD()": FunctionFragment;
    "DAI()": FunctionFragment;
    "FRAX()": FunctionFragment;
    "GUSD()": FunctionFragment;
    "LUSD()": FunctionFragment;
    "MIM()": FunctionFragment;
    "SUSD()": FunctionFragment;
    "USDC()": FunctionFragment;
    "USDT()": FunctionFragment;
    "addRibbonLendPool(address)": FunctionFragment;
    "deposit(uint256,address,uint256,address)": FunctionFragment;
    "depositDAIWithPermit(uint256,uint256,address,uint256,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeRibbonLendPool(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "ribbonLendPools(address)": FunctionFragment;
    "swapData(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ALUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "BUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "FRAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "GUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "LUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIM", values?: undefined): string;
  encodeFunctionData(functionFragment: "SUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRibbonLendPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDAIWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeRibbonLendPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ribbonLendPools",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "swapData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ALUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FRAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRibbonLendPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDAIWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRibbonLendPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ribbonLendPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LendPoolHelper extends BaseContract {
  contractName: "LendPoolHelper";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendPoolHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ALUSD(overrides?: CallOverrides): Promise<[string]>;

    BUSD(overrides?: CallOverrides): Promise<[string]>;

    DAI(overrides?: CallOverrides): Promise<[string]>;

    FRAX(overrides?: CallOverrides): Promise<[string]>;

    GUSD(overrides?: CallOverrides): Promise<[string]>;

    LUSD(overrides?: CallOverrides): Promise<[string]>;

    MIM(overrides?: CallOverrides): Promise<[string]>;

    SUSD(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    USDT(overrides?: CallOverrides): Promise<[string]>;

    addRibbonLendPool(
      ribbonLendPool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      asset: string,
      minAmountOut: BigNumberish,
      ribbonLendPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositDAIWithPermit(
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      ribbonLendPool: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeRibbonLendPool(
      ribbonLendPool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ribbonLendPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        exchange: string;
        i: BigNumber;
        j: BigNumber;
        underlying: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC20(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ALUSD(overrides?: CallOverrides): Promise<string>;

  BUSD(overrides?: CallOverrides): Promise<string>;

  DAI(overrides?: CallOverrides): Promise<string>;

  FRAX(overrides?: CallOverrides): Promise<string>;

  GUSD(overrides?: CallOverrides): Promise<string>;

  LUSD(overrides?: CallOverrides): Promise<string>;

  MIM(overrides?: CallOverrides): Promise<string>;

  SUSD(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  USDT(overrides?: CallOverrides): Promise<string>;

  addRibbonLendPool(
    ribbonLendPool_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    asset: string,
    minAmountOut: BigNumberish,
    ribbonLendPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositDAIWithPermit(
    amount: BigNumberish,
    minAmountOut: BigNumberish,
    ribbonLendPool: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    allowed: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeRibbonLendPool(
    ribbonLendPool_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ribbonLendPools(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  swapData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      exchange: string;
      i: BigNumber;
      j: BigNumber;
      underlying: boolean;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  withdrawERC20(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ALUSD(overrides?: CallOverrides): Promise<string>;

    BUSD(overrides?: CallOverrides): Promise<string>;

    DAI(overrides?: CallOverrides): Promise<string>;

    FRAX(overrides?: CallOverrides): Promise<string>;

    GUSD(overrides?: CallOverrides): Promise<string>;

    LUSD(overrides?: CallOverrides): Promise<string>;

    MIM(overrides?: CallOverrides): Promise<string>;

    SUSD(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    USDT(overrides?: CallOverrides): Promise<string>;

    addRibbonLendPool(
      ribbonLendPool_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      amount: BigNumberish,
      asset: string,
      minAmountOut: BigNumberish,
      ribbonLendPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositDAIWithPermit(
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      ribbonLendPool: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeRibbonLendPool(
      ribbonLendPool_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    ribbonLendPools(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    swapData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        exchange: string;
        i: BigNumber;
        j: BigNumber;
        underlying: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    withdrawERC20(asset: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ALUSD(overrides?: CallOverrides): Promise<BigNumber>;

    BUSD(overrides?: CallOverrides): Promise<BigNumber>;

    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    FRAX(overrides?: CallOverrides): Promise<BigNumber>;

    GUSD(overrides?: CallOverrides): Promise<BigNumber>;

    LUSD(overrides?: CallOverrides): Promise<BigNumber>;

    MIM(overrides?: CallOverrides): Promise<BigNumber>;

    SUSD(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    addRibbonLendPool(
      ribbonLendPool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      asset: string,
      minAmountOut: BigNumberish,
      ribbonLendPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositDAIWithPermit(
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      ribbonLendPool: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeRibbonLendPool(
      ribbonLendPool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ribbonLendPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ALUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FRAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRibbonLendPool(
      ribbonLendPool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      asset: string,
      minAmountOut: BigNumberish,
      ribbonLendPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositDAIWithPermit(
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      ribbonLendPool: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRibbonLendPool(
      ribbonLendPool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ribbonLendPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
